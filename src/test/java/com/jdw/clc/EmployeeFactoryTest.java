package com.jdw.clc;

import org.junit.Before;
import org.junit.Test;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Properties;

import static org.junit.Assert.*;       // generated by IntelliJ

/**
 * Created by jdwilson on 8/21/15.
 */
public class EmployeeFactoryTest {

    Department testDept = new Department("SoftwareEngineering");

    Properties props = new Properties();

//    props.load(inputStream);
//    inputStream.close();

    @Before
    public void setUp() throws FileNotFoundException {
        //FileInputStream inputStream = new FileInputStream("test.properties");
    }

    @Test
    public void testCreateManagerEmployee() throws EmployeeFactoryException {
        Employee manager = EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, testDept);
        assertNotNull(manager);
        assertTrue(manager instanceof Manager);     // verifies ManagerFunctions should be available
        assertEquals(Employee.EmployeeRole.MANAGER, manager.getRole());
        assertEquals(testDept, manager.getDepartment());
        assertEquals(300.00, manager.getExpenseAllocation(), 0.005);    // note, this may change to int to simpify.
        // todo add tests for ManagerFunctions -- see integration tests below
    }

    @Test
    public void testCreateDeveloperEmployee() throws EmployeeFactoryException {
        Employee developer = EmployeeFactory.createEmployee(Employee.EmployeeRole.DEVELOPER, testDept);
        assertNotNull(developer);
        assertEquals(Employee.EmployeeRole.DEVELOPER, developer.getRole());
        assertEquals(testDept, developer.getDepartment());
        assertEquals(1000.00, developer.getExpenseAllocation(), 0.005);    // note, this may change to int to simpify
    }

    @Test
    public void testCreateQATesterEmployee() throws EmployeeFactoryException  {
        Employee qa_tester = EmployeeFactory.createEmployee(Employee.EmployeeRole.QA_TESTER, testDept);
        assertNotNull(qa_tester);
        assertEquals(Employee.EmployeeRole.QA_TESTER, qa_tester.getRole());
        assertEquals(testDept, qa_tester.getDepartment());
        assertEquals(500.00, qa_tester.getExpenseAllocation(), 0.005);    // note, this may change to int to simpify
    }

    @Test(expected=EmployeeFactoryException.class)
    public void testCreateInvalidEmployee() throws EmployeeFactoryException {
        Employee invalidEmployee = EmployeeFactory.createEmployee(Employee.EmployeeRole.UNASSIGNED, testDept);
    }

    // Integration tests
    // Test expense summary methods
    @Test
    public void testCreateDeptManagerAndTeamAndSummarizeExpenseAllocation() {
        Department softwareEngineering = new Department("SoftwareEngineering");
        Manager softwareEngineeringManager = null;
        Employee softwareDeveloper = null;
        Employee softwareQATester = null;

        try {
            softwareEngineeringManager =
                    (Manager) EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, softwareEngineering);
            assertNotNull(softwareEngineeringManager);

            softwareDeveloper =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.DEVELOPER, softwareEngineering);
            assertNotNull(softwareDeveloper);

            softwareQATester =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.QA_TESTER, softwareEngineering);
            assertNotNull(softwareQATester);

        } catch (EmployeeFactoryException exc) {
            System.err.println("caught exception:" + exc.toString());
        }

        // assign employees to manager
        assertTrue(softwareEngineeringManager.addEmployee(softwareDeveloper));
        assertTrue(softwareEngineeringManager.addEmployee(softwareQATester));

        // summarize this managers expense allocation
        double expenseAllocation =
                softwareEngineeringManager.getExpenseAllocation();
        System.err.println("manager expense allocation = " + expenseAllocation);

        double totalExpenseAllocation = softwareEngineeringManager.getTotalExpenseAllocation();
        System.err.println("total expense allocation = " + totalExpenseAllocation);
    }

    // Deeper management and employee team
    @Test
    public void testCreateDeptManagerAndLargeTeamAndSummarizeExpenseAllocation() {
        Department softwareEngineering = new Department("SoftwareEngineering");
        Manager softwareEngineeringManager = null;
        Manager groupManager = null;
        Employee softwareDeveloper = null;
        Employee softwareQATester = null;

        try {
            groupManager =
                    (Manager) EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, softwareEngineering);
            assertNotNull(groupManager);

            softwareEngineeringManager =
                    (Manager) EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, softwareEngineering);
            assertNotNull(softwareEngineeringManager);

            softwareDeveloper =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.DEVELOPER, softwareEngineering);
            assertNotNull(softwareDeveloper);

            softwareQATester =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.QA_TESTER, softwareEngineering);
            assertNotNull(softwareQATester);

        } catch (EmployeeFactoryException exc) {
            System.err.println("caught exception:" + exc.toString());
        }

        // assign employees to manager
        assertTrue(groupManager.addEmployee(softwareEngineeringManager));
        assertTrue(groupManager.addEmployee(softwareDeveloper));
        assertTrue(groupManager.addEmployee(softwareQATester));

        // summarize this managers expense allocation
        double expenseAllocation =
                groupManager.getExpenseAllocation();
        System.err.println("manager expense allocation = " + expenseAllocation);
        assertEquals(300.00, expenseAllocation, 0.005);

        double totalExpenseAllocation =
                groupManager.getTotalExpenseAllocation();
        System.err.println("total expense allocation = " + totalExpenseAllocation);
        assertEquals(2100.00, totalExpenseAllocation, 0.005);
    }

    @Test
    public void testDepartmentExpenseAllocation() {
        // todo
        // reusing above, but create two different depts
        Department softwareEngineering = new Department("SoftwareEngineering");
        Department qualityAssurance = new Department("QualityAssurance");
        Manager softwareEngineeringManager = null;
        Manager groupManager = null;
        Employee softwareDeveloper = null;
        Employee softwareQATester = null;

        try {
            groupManager =
                    (Manager) EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, qualityAssurance);
            assertNotNull(groupManager);

            softwareEngineeringManager =
                    (Manager) EmployeeFactory.createEmployee(Employee.EmployeeRole.MANAGER, softwareEngineering);
            assertNotNull(softwareEngineeringManager);

            softwareDeveloper =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.DEVELOPER, softwareEngineering);
            assertNotNull(softwareDeveloper);

            // this guy goes into QA dept
            softwareQATester =
                    EmployeeFactory.createEmployee(Employee.EmployeeRole.QA_TESTER, qualityAssurance);
            assertNotNull(softwareQATester);

        } catch (EmployeeFactoryException exc) {
            System.err.println("caught exception:" + exc.toString());
        }

        // assign employees to manager
        assertTrue(groupManager.addEmployee(softwareEngineeringManager));
        assertTrue(groupManager.addEmployee(softwareDeveloper));
        assertTrue(groupManager.addEmployee(softwareQATester));

        // summarize this managers expense allocation
        double expenseAllocation =
                groupManager.getExpenseAllocation();
        System.err.println("manager expense allocation = " + expenseAllocation);
        assertEquals(300.00, expenseAllocation, 0.005);

        double totalExpenseAllocation =
                groupManager.getTotalExpenseAllocation();
        System.err.println("total expense allocation = " + totalExpenseAllocation);
        assertEquals(2100.00, totalExpenseAllocation, 0.005);

        // by dept, sw
        double totalSoftwareEngineeringExpenseAllocation =
                groupManager.getTotalExpenseAllocation(softwareEngineering);
        System.err.println("total SW dept expense allocation = " + totalSoftwareEngineeringExpenseAllocation);
        assertEquals(1600.00, totalSoftwareEngineeringExpenseAllocation, 0.005);

        // by dept QA
        double totalQAExpenseAllocation =
                groupManager.getTotalExpenseAllocation(qualityAssurance);
        System.err.println("total QA dept expense allocation = " + totalQAExpenseAllocation);
        assertEquals(800.00, totalQAExpenseAllocation, 0.005);
    }


}